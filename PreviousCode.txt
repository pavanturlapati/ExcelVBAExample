' Author: Pavan T
' Date  : Aug10

Sub extract_ExecutionDataFromJira()
Dim projectName As String
Dim resources_sheet_name As String
Dim te_sheet_name As String
Dim num_of_Days As Integer
Dim tests_executed_first_column As Integer
Dim consolidated_Resources As Dictionary

'Initialize Variables
project_Name = "SOMS"
te_sheet_name = "TE_Jira"
num_of_days_of_execution_report = 6
tests_executed_first_column_values = 8
resources_sheet_name = "Resources_Master"

    Application.Run "CreateSheetAndFillHeaders", project_Name, num_of_days_of_execution_report
    Set consolidated_Resources = readResourcesDetails(resources_sheet_name)
    Application.Run "update_resources_executions_bugs_details", project_Name, te_sheet_name, consolidated_Resources
    MsgBox "DATA EXTRACTION for " & Chr(39) & project_Name & Chr(39) & " team is NOW COMPLETED!", vbInformation
End Sub

Sub CreateSheetAndFillHeaders(wsName As String, num_of_Days As Integer)
Dim ws As Worksheet
    Dim headers As Variant
    Dim i As Integer
    Dim lastColumn As Integer
    Dim todayDate As Date
    Dim countDays As Integer
    Dim currentRow As Integer
    
    
    ' Delete the sheet if it already exists
    On Error Resume Next
    Application.DisplayAlerts = False
    Set ws = ThisWorkbook.Sheets(wsName)
    If Not ws Is Nothing Then
        ws.Delete
    End If
    Application.DisplayAlerts = True
    On Error GoTo 0
    
    ' Create a new worksheet
    Set ws = ThisWorkbook.Sheets.Add
    ws.Name = wsName
    
    ' Define the column headers
    headers = Array("#", "Project/" & Chr(10) & "Brand", "Assignee", "Assignee (Jira)", "Exists", "Total" & Chr(10) & "Tests" & Chr(10) & "Executed", "Total" & Chr(10) & " Defects" & Chr(10) & "Logged")
    
    ' Loop through the headers array to set column names in row 2
    For i = LBound(headers) To UBound(headers)
        ws.Cells(2, i + 1).Value = headers(i)
        With ws.Range(ws.Cells(1, i + 1), ws.Cells(2, i + 1))
            .Merge
            .Borders.LineStyle = xlContinuous
            .Font.Size = 9
            .Font.Bold = True
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .Columns.AutoFit
            If i > 4 And i < 7 Then
                .Interior.Color = RGB(173, 216, 230) ' Blue for "Total S", "Total B", "Total D"
            Else
                .Interior.Color = RGB(144, 238, 144) ' Green for other columns
            End If
        End With
    Next i
    
    'MsgBox UBound(headers) + 2
    ' Initialize variables
    todayDate = Date
    countDays = 0
    currentRow = 1
    currentColumn = UBound(headers) + 2
    
    ' Loop until we find 'num_of_Days' non-weekend days
    Do While countDays < num_of_Days
        If Weekday(todayDate) <> vbSaturday And Weekday(todayDate) <> vbSunday Then
            ' Formatting the current date cell
            With ws.Cells(currentRow, currentColumn)
                .Value = Format(todayDate, "mm/dd/yyyy")
                .Font.Size = 9
                .Font.Bold = True
                .Borders.LineStyle = xlContinuous
                .Interior.Color = RGB(144, 238, 144)
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
            End With
            
            ' Merge the date cell with the adjacent cell
            ws.Range(ws.Cells(currentRow, currentColumn), ws.Cells(currentRow, currentColumn + 1)).Merge
    
            ' Formatting the "Tests Executed" and "Defects Logged" cells
            With ws.Cells(currentRow + 1, currentColumn)
                .Value = "Tests" & Chr(10) & "Executed"
                .Font.Size = 9
                .Font.Bold = True
                .Interior.Color = RGB(144, 238, 144)
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .Borders.LineStyle = xlContinuous
            End With
    
            With ws.Cells(currentRow + 1, currentColumn + 1)
                .Value = "Defects" & Chr(10) & "Logged"
                .Font.Size = 9
                .Font.Bold = True
                .Interior.Color = RGB(144, 238, 144)
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlCenter
                .Borders.LineStyle = xlContinuous
            End With
            
            ' Increment counters
            countDays = countDays + 1
            currentColumn = currentColumn + 2
        End If
        
        ' Move to the previous day
        todayDate = todayDate - 1
    Loop
    
End Sub


Sub update_resources_executions_bugs_details(wsName As String, te_wsName As String, consolidated_Resources As Dictionary)
'Fill in the resourcenames in the sheet
    Dim k As Variant
    Dim currentRow As Integer
    Set project_ws = ThisWorkbook.Sheets(wsName)
    ' Find the last row with data in Column C
        lastRow = project_ws.Cells(project_ws.Rows.Count, 3).End(xlUp).Row
    ' If the sheet is empty (only headers), start writing at row 2
        If lastRow = 1 And project_ws.Cells(1, 1).Value = "" Then
            lastRow = 0
        End If
    currentRow = lastRow + 2
    For Each k In consolidated_Resources.Keys
        converted_resourceName = LCase(consolidated_Resources(k))
        resourceName = consolidated_Resources(k)
        If (InStr(1, converted_resourceName, LCase(wsName)) > 0) Then
            'MsgBox resourceName
            project_ws.Cells(currentRow, 1).Value = currentRow - 2
            project_ws.Cells(currentRow, 2).Value = Split(resourceName, "%%")(1)
            project_ws.Cells(currentRow, 3).Value = Split(resourceName, "%%")(0)
            project_ws.Cells(currentRow, 4).Value = k
            
            project_ws.Cells(currentRow, 5).Formula = "=IF(COUNTIF(" & te_wsName & "!$1:$1,D" & currentRow & ")>0,MATCH(D" & currentRow & "," & te_wsName & "!$1:$1,0)," & "-1" & ")"
            project_ws.Cells(currentRow, 5).Value = GetColumnLetter(project_ws.Cells(currentRow, 5).Value)
            
            'Total Tests Executed
            Call updateTotalTestsExecutedFormula(wsName, 8, currentRow, 6, "TE")
            
            'Total Defects Logged
            Call updateTotalTestsExecutedFormula(wsName, 9, currentRow, 7, "DE")
            
            ' Find the last column with data in the first row (header row)
            lastCol = project_ws.Cells(2, project_ws.Columns.Count).End(xlToLeft).Column
            'MsgBox lastCol

            ' Summing values across multiple columns
            Dim colOffset As Integer
            Dim te_counter As Integer
            Dim defects_counter As Integer
            te_counter = 8
            defects_counter = 9
            
            For colOffset = 8 To lastCol Step 2
                'MsgBox colOffset
                If (Len(project_ws.Cells(currentRow, 5).Value) > 0) Then
                    project_ws.Cells(currentRow, te_counter).Formula = "=IFERROR(SUMIFS(" & te_wsName & "!$" & project_ws.Cells(currentRow, 5).Value & ":$" & project_ws.Cells(currentRow, 5).Value & "," & te_wsName & "!$B:$B," & Chr(34) & project_ws.Cells(1, te_counter).Value & Chr(34) & "),0)"
                    project_ws.Cells(currentRow, defects_counter).Formula = ("=COUNTIFS(" & wsName & "_Jira!$M:$M," & wsName & "!C" & currentRow & "," & wsName & "_Jira!$A:$A," & Chr(34) & "Bug" & Chr(34) & "," & wsName & "_Jira!$N:$N," & Chr(34) & "=" & project_ws.Cells(1, te_counter).Value & Chr(34) & ")")
                    
                Else
                    project_ws.Cells(currentRow, te_counter).Value = 0
                    project_ws.Cells(currentRow, defects_counter).Value = 0
                End If
                te_counter = te_counter + 2
                defects_counter = defects_counter + 2
            Next colOffset
            
            
            currentRow = currentRow + 1
        End If
    Next k
    
    project_ws.Cells.Font.Size = 9
    
    ' To add the Sum
    ' Update the last row after writing dictionary values
    lastRow = project_ws.Cells(project_ws.Rows.Count, 3).End(xlUp).Row
    
    project_ws.Range("A" & lastRow + 1 & ":C" & lastRow + 1).Merge
    project_ws.Range("A" & lastRow + 1 & ":C" & lastRow + 1).Borders.LineStyle = xlContinuous
    project_ws.Range("A" & lastRow + 1 & ":C" & lastRow + 1).Font.Size = 14
    project_ws.Range("A" & lastRow + 1 & ":C" & lastRow + 1).Font.Bold = True
    project_ws.Range("A" & lastRow + 1 & ":C" & lastRow + 1).Interior.Color = RGB(234, 185, 136)
    project_ws.Range("A" & lastRow + 1 & ":C" & lastRow + 1).Value = "GRAND TOTAL"
        
    ' Find the last column with data in the first row (header row)
    lastCol = project_ws.Cells(1, project_ws.Columns.Count).End(xlToLeft).Column
    
    ' Loop through each column with data
    For col = 6 To lastCol + 1
        ' Define the range to calculate the sum in each column from row 3 to the last data row
        Set sumRange = project_ws.Range(project_ws.Cells(3, col), project_ws.Cells(lastRow, col))
        
        ' Calculate the sum and write it in the cell below the last data row in the same column
        Set sumCell = project_ws.Cells(lastRow + 1, col)
        sumCell.Value = Application.WorksheetFunction.Sum(sumRange)
        
        ' Apply formatting (bold and font size 11)
        With sumCell
            .Font.Bold = True
            .Font.Size = 14
            .Interior.Color = RGB(234, 185, 136)
        End With
    Next col

    project_ws.Cells.Borders.LineStyle = xlContinuous
    project_ws.Cells.HorizontalAlignment = xlCenter
    project_ws.Cells.VerticalAlignment = xlCenter
    project_ws.Columns.AutoFit
    project_ws.Range("C:C").HorizontalAlignment = xlLeft
    project_ws.Range("C1:C2").HorizontalAlignment = xlCenter
    project_ws.Range("D:E").EntireColumn.Hidden = True
    project_ws.Range("A1").Select
    With ActiveWindow
        .SplitColumn = 1
        .SplitRow = 2
        .FreezePanes = True
    End With
End Sub

Sub updateTotalTestsExecutedFormula(wsName As String, start_Column As Integer, row_number As Integer, column_number As Integer, paramType As String)
    Dim ws As Worksheet
    Dim lastColumn As Long
    Dim totalTestsCell As Range
    Dim totalRange As Range
    Dim firstDateColumn As Long
    Dim lastDateColumn As Long
    
    ' Set the worksheet to the active sheet (or specify the worksheet name)
    Set ws = ThisWorkbook.Sheets(wsName)
    
    ' Find the last column with data
    lastColumn = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    'MsgBox "lastColumn is " & lastColumn
    
    ' Find the cell for "Total Tests Executed"
    Set totalTestsCell = ws.Cells(row_number, column_number)
    
    ' Initialize the sum formula
    sumFormula = "="
    
    If (paramType = "TE") Then
        ' Loop through the columns to find and sum "Tests Executed" columns
        For currentColumn = start_Column To lastColumn Step 2
            ' Add each "Tests Executed" column to the sum formula
            sumFormula = sumFormula & ws.Cells(row_number, currentColumn).Address & "+"
        Next currentColumn
    Else
        ' Loop through the columns to find and sum "Tests Executed" columns
        For currentColumn = start_Column To lastColumn + 1 Step 2
            ' Add each "Tests Executed" column to the sum formula
            sumFormula = sumFormula & ws.Cells(row_number, currentColumn).Address & "+"
        Next currentColumn
    End If
    
    
    ' Remove the last "+" from the formula
    sumFormula = Left(sumFormula, Len(sumFormula) - 1)
    
    ' Set the sum formula in the "Total Tests Executed" cell
    totalTestsCell.Formula = sumFormula
    

End Sub

Function readResourcesDetails(resources_sheet_name As String) As Dictionary
    
    'Read the complete resources from the sheet
        Set resources_ws = ThisWorkbook.Sheets(resources_sheet_name)
    ' Find the last row with data in Column A
        lastRow = resources_ws.Cells(resources_ws.Rows.Count, "B").End(xlUp).Row
    ' Loop through each row in the sheet
        Dim consolidated_Resources
        Set consolidated_Resources = CreateObject("Scripting.Dictionary")
        For i = 2 To lastRow ' Row 1 is headers
            Key = resources_ws.Cells(i, "C").Value ' Column C value as the key
            Value = resources_ws.Cells(i, "B").Value & "%%" & resources_ws.Cells(i, "A").Value ' Column B & "%%" & Column A as the value
            'MsgBox Key & ": " & Value
            
            ' Add key-value pair to the dictionary
            If Not consolidated_Resources.exists(Key) Then
                consolidated_Resources.Add Key, Value
            Else
                MsgBox "Duplicate key found: " & Key, vbExclamation
            End If
        Next i
            
    Set readResourcesDetails = consolidated_Resources
End Function

Function GetColumnLetter(columnNumber As Long) As String
    Dim columnLetter As String
    columnLetter = ""

    Do While columnNumber > 0
        Dim remainder As Long
        remainder = (columnNumber - 1) Mod 26
        columnLetter = Chr(65 + remainder) & columnLetter
        columnNumber = (columnNumber - remainder) \ 26
    Loop

    GetColumnLetter = columnLetter
End Function



